//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h> 
using namespace std; 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

void printList(Node* node) 
{ 
    while (node != NULL) { 
        cout << node->data%10; 
        node = node->next; 
    }  
    cout<<"\n";
} 


// } Driver Code Ends
//User function template for C++

/* 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution
{
    public:
    Node* reverse(Node* head){
        if(head == NULL  || head->next == NULL){
            return head;
        }
        Node* curr = head;
        Node* prev = NULL;
        while(curr != NULL){
            Node* forw= curr->next;
            curr->next = prev;
            prev = curr;
            curr = forw;
            
        }
        return prev;
    }
    Node* addOne(Node *head) 
    {
        
        // Your Code here
        Node* pi = head;
        if(head->next == NULL){
            int num = head->data + 1;
            if(num <10){
                Node *j = new Node(num);
                return j;
            }
            else{
                Node* h = new Node(num/10);
                h->next = new Node(num %10);
                return h;
            }
        }

        Node* curr= reverse(head);
        int num =0;
        int carry = 0;
        Node*ans = new Node(-1);
        Node* b = ans;
        curr->data = curr->data +1;
        while(curr != NULL){
           num = (curr->data + carry) ;
           ans->next  = new Node(num%10);
           carry = num /10;
           curr = curr->next;
           ans = ans->next;
            
        }
        if(carry != 0){
            ans->next = new Node(carry);
        }
        
        Node*v = reverse(b->next);
        return v;
        }
 
};

//{ Driver Code Starts.

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        string s;
        cin>>s;
        
        Node* head = new Node( s[0]-'0' );
        Node* tail = head;
        for(int i=1; i<s.size(); i++)
        {
            tail->next = new Node( s[i]-'0' );
            tail = tail->next;
        }
        Solution ob;
        head = ob.addOne(head);
        printList(head); 
    }
    return 0; 
} 

// } Driver Code Ends
