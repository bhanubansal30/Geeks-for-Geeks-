//{ Driver Code Starts
#include <bits/stdc++.h>

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};

using namespace std;

void printList(Node *Node)
{
    while (Node != NULL)
    {
        printf("%d ", Node->data);
        Node = Node->bottom;
    }
}

Node* flatten (Node* root);

int main(void) {

	int t;
	cin>>t;
	while(t--){
    int n,m,flag=1,flag1=1;
    struct Node * temp=NULL;
	struct Node * head=NULL;
	struct Node * pre=NULL;
	struct Node * tempB=NULL;
	struct Node * preB=NULL;
		cin>>n;
        int work[n];
		for(int i=0;i<n;i++)
            cin>>work[i];
		for(int i=0;i<n;i++){
			m=work[i];
			--m;
			int data;
			scanf("%d",&data);
			temp = new Node(data);
			temp->next = NULL;
			temp->bottom = NULL;
			
			if(flag){
				head = temp;
				pre = temp;
				flag = 0;
				flag1 = 1;
			}
			else{
				pre->next = temp;
				pre = temp;
				flag1 = 1;
			}
			for(int j=0;j<m;j++){
				
				int temp_data;
				scanf("%d",&temp_data);
				tempB = new Node(temp_data);

				if(flag1){
					temp->bottom=tempB;
					preB=tempB;
					flag1=0;
				}
				else{
					preB->bottom=tempB;
					preB=tempB;
				}
			}
		}
		   Node *fun = head;
		   Node *fun2=head;

            Node* root = flatten(head);
            printList(root);
            cout<<endl;

	}
	return 0;
}

// } Driver Code Ends


/* Node structure  used in the program

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */
    Node* solve(Node* first, Node* second){
        if(first->bottom == NULL){
            first->bottom = second;
            return first;
        }
        Node* curr1 = first;
        Node* next1 = curr1->bottom;
        Node* curr2 = second;
        Node * next2 = curr2->bottom;
        while(next1 != NULL &&  curr2 != NULL){
            if((curr2->data >= curr1->data) && (curr2->data <= next1->data)){
                curr1->bottom = curr2;
                next2 = curr2->bottom;
                curr2->bottom = next1;
                curr1 = curr2;
                curr2 = next2;
            }
            else{
                curr1 = next1;
                next1 = next1->bottom;
                if(next1 == NULL){
                    curr1->bottom= curr2;
                    return first;
                }
            }
            
        }
        return first;
    }
    Node* merge(Node* first, Node* second){
        if(first == NULL){
            return second;
        }
        if(second == NULL){
            return first;
        }
        if(first->data <= second->data){
           return solve(first,second);
        }
        else
        {
            return solve(second,first);
        }
    }
Node *flatten(Node *root)
{
   // Your code here
   Node* curr = root;
   while(curr->next ){
       Node* head1 = curr;
       Node* head2 = curr->next;
       Node* head3 = curr->next->next;
       head1->next = NULL;
       head2->next = NULL;
       curr = merge(head1,head2);
       curr->next = head3;
   }
   return curr;
}

