//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h> 
using namespace std; 


// } Driver Code Ends
//Back-end complete function Template for C++
class Node{
    public:
    int data;
    Node*left;
    Node* right;
    Node(int x){
        data = x;
        left = NULL;
        right = NULL;
    }
};
class Solution{
    public:
    int find(int* in,int x,int start,int end,int &y){
        for(int i = start;i<=end;i++){
            if(in[i] == x  )
            return i;
        }
        y = 1;
        return -1;
    }
    Node*tree(int* in, int* pre,int instart,int inend,int index,int &y){
        if(instart>inend){
            return NULL;
        }
        Node* root = new Node(pre[index]);
        int pos = find(in,pre[index],instart,inend,y);
        if(pos == -1){
        
            return NULL;
        }
      
        root->left = tree(in,pre,instart,pos-1,index+1,y);
        root->right = tree(in,pre,pos+1,inend,index+(pos-instart)+1,y);
        return root;
    }
    Node*trees(int* in, int* post,int instart,int inend,int index,int &y){
        if(instart>inend){
            return NULL;
        }
        Node* root = new Node(post[index]);
        
        int pos = find(in,post[index],instart,inend,y);
           if(pos == -1){
        
            return NULL;
        }
        root->right = trees(in,post,pos+1,inend,index-1,y);
        root->left = trees(in,post,instart,pos-1,index-(inend-pos)-1,y);
        return root;
    }
    bool travarse(Node*gnt, Node*gn){
        if(gnt == NULL && gn == NULL){
            return 1;
        }
        if((gnt == NULL && gn !=NULL) || (gn == NULL && gnt !=NULL)){
            return 0;
        }
        if(gnt->data != gn->data){
            return 0;
        }
       return travarse(gnt->left,gn->left) && travarse(gnt->right,gn->right);
        
    }
    bool checktree(int preorder[], int inorder[], int postorder[], int N) 
    { 
    	// Your code goes here
    	int y = 0;
    Node*gnt =	tree(inorder,preorder,0,N-1,0,y);
    	 Node*gn =	trees(inorder,postorder,0,N-1,N-1,y);
    	 if(y == 1){
    	     return 0;
    	 }
    	return travarse(gnt,gn);
    	
    	
    } 

};


//{ Driver Code Starts.

int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		int preorder[n];
		int inorder[n];
		int postorder[n];

		for (int i = 0; i < n; ++i)
			cin>>preorder[i];

		for (int i = 0; i < n; ++i)
			cin>>inorder[i];

		for (int i = 0; i < n; ++i)
			cin>>postorder[i];
        
        Solution obj;
		if(obj.checktree(preorder, inorder, postorder, n))
			cout << "Yes\n";
		else
			cout<<"No\n";
	} 
	return 0; 
} 


// } Driver Code Ends
