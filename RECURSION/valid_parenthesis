//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;


// } Driver Code Ends
//User function Template for C++

// N is the number of pairs of parentheses
// Return list of all combinations of balanced parantheses
class Solution
{
    public:
    void all(int l,int r,int n,vector<string>&s,string &temp){
        if(l+r == 2*n ){
            s.push_back(temp);
            return;
        }
        if(l<n){
            temp.push_back('(');
            all(l+1,r,n,s,temp);
            temp.pop_back();
        }
        if(r<l){
            temp.push_back(')');
         all(l,r+1,n,s,temp);
         temp.pop_back();
        }
    }
    vector<string> AllParenthesis(int n) 
    {
        // Your code goes here
        int l = 0;
        int r = 0;
        string temp;
        vector<string>s;
        all(l,r,n,s,temp);
        return s;
        
    }
};

//{ Driver Code Starts.


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	}
	return 0; 
} 

// } Driver Code Ends
